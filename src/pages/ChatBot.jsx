import { useState, useRef, useEffect } from "react";
import ScaleLoader from "react-spinners/ScaleLoader";
import { TypeAnimation } from "react-type-animation";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faMessage } from "@fortawesome/free-regular-svg-icons";
import axios from 'axios';

function ChatBot() {
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);
  const [timeOfRequest, SetTimeOfRequest] = useState(0);
  let [promptInput, SetPromptInput] = useState("");
  let [chatHistory, SetChatHistory] = useState([]);

  const commonQuestions=[
    "H·ªçc vi·ªán c√≥ bao nhi√™u lo·∫°i h·ªçc b·ªïng?",
    "C√°c m·ªëc th·ªùi gian quan tr·ªçng trong vi·ªác tuy·ªÉn sinh?",
    "L√†m sao ƒë·ªÉ ki·∫øm ng∆∞·ªùi y√™u khi h·ªçc ƒë·∫°i h·ªçc?",
    "H·ªì s∆° nh·∫≠p h·ªçc c·∫ßn chu·∫©n b·ªã nh·ªØng g√¨?",
    "C√°c c√¢u l·∫°c b·ªô c√≥ ·ªü h·ªçc vi·ªán?",
    "Nh·ªØng ng√†nh h·ªçc m·ªõi trong h·ªçc vi·ªán nƒÉm 2024?",
    "C√°c ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn c·ªßa h·ªçc vi·ªán?",
    "Quy tr√¨nh n·ªôp h·ªì s∆° tr·ª±c tuy·∫øn nh∆∞ n√†o?",
    "Ng√†nh C√¥ng ngh·ªá th√¥ng tin x√©t tuy·ªÉn theo t·ªï h·ª£p n√†o?",
    "Ch·ªâ ti√™u c·ªßa Ng√†nh C√¥ng ngh·ªá th√¥ng tin l√† bao nhi√™u?",
    "M√£ ng√†nh c·ªßa ch∆∞∆°ng tr√¨nh C√¥ng ngh·ªá th√¥ng tin (ƒë·ªãnh h∆∞·ªõng ·ª©ng d·ª•ng) l√† bao nhi√™u?",
    "Th·ªùi gian ƒë√†o t·∫°o c·ªßa ng√†nh C√¥ng ngh·ªá th√¥ng tin l√† bao l√¢u?",
    "Ng√†nh C√¥ng ngh·ªá Internet v·∫°n v·∫≠t (IoT) ƒë∆∞·ª£c ƒë√†o t·∫°o ·ªü c∆° s·ªü n√†o?",
    "H·ªçc ph√≠ c·ªßa Ch∆∞∆°ng tr√¨nh C√¥ng ngh·ªá th√¥ng tin (ƒë·ªãnh h∆∞·ªõng ·ª©ng d·ª•ng) l√† bao nhi√™u?",
    "H·ªçc vi·ªán ƒë√†o t·∫°o nh·ªØng ng√†nh n√†o ·ªü c∆° s·ªü mi·ªÅn b·∫Øc?",
    "ƒêi·ªÉm chu·∫©n t·∫•t c·∫£ c√°c ng√†nh nƒÉm nay?",
    "ƒêi·ªÉm chu·∫©n ng√†nh c√¥ng ngh·ªá th√¥ng tin theo ph∆∞∆°ng th·ª©c thi thpt nƒÉm nay t·∫°i c∆° s·ªü mi·ªÅn b·∫Øc l√† bao nhi√™u?",
    "C∆° s·ªü ƒë√†o t·∫°o c·ªßa h·ªçc vi·ªán t·∫°i c∆° s·ªü mi·ªÅn b·∫Øc ·ªü ƒë√¢u?",
    "Tr·ª• s·ªü ch√≠nh c·ªßa h·ªçc vi·ªán ·ªü ƒë√¢u?",
    "H·ªçc t·∫°i h·ªçc vi·ªán c√≥ nh√†n kh√¥ng?",
    "M√¨nh mu·ªën ƒëƒÉng k√Ω k√Ω t√∫c x√° th√¨ nh∆∞ n√†o?",
    "C√≥ nh·ªØng ki·ªÉu ƒë√†o t·∫°o n√†o t·∫°i h·ªçc vi·ªán?",
    "C√°c trang web ch√≠nh th·ª©c c·ªßa h·ªçc vi·ªán?",

  ]
  let [isLoading, SetIsLoading] = useState(false);
  let [isGen, SetIsGen] = useState(false);
  const [dataChat, SetDataChat] = useState([
    [
      "start",
      [
        "Ch√†o b·∫°n! T√¥i l√† PTIT chatbot, m·ªôt tr·ª£ l√Ω ·∫£o ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ gi√∫p b·∫°n gi·∫£i ƒë√°p th·∫Øc m·∫Øc v√† cung c·∫•p th√¥ng tin h·ªØu √≠ch v·ªÅ vi·ªác tuy·ªÉn sinh t·∫°i H·ªçc Vi·ªán. B·∫°n c·∫ßn t√¥i h·ªó tr·ª£ ƒëi·ªÅu g√¨ h√¥m nay? üòÑ",
        null,
      ],
    ],
  ]);
  useEffect(() => {
    ScrollToEndChat();
  }, [isGen]);
  useEffect(() => {
    const interval = setInterval(() => {
      SetTimeOfRequest((timeOfRequest) => timeOfRequest + 1);
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  function ScrollToEndChat() {
    messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
  }
  const onChangeHandler = (event) => {
    SetPromptInput(event.target.value);
  }
  const sendTelegramBotForGgsheet = async () => {
    try {
      const data = {
        ["question"]: promptInput,
      };
      await axios
        .post(
          "https://api.sheetbest.com/sheets/5d12cce3-725a-4e8d-9b8d-a6269fe1688b",
          data
        )
    } catch (err) {
      console.log("err: ", err);
    }
  }
  async function SendMessageChat() {
    if (promptInput !== "" && isLoading === false) {
      SetTimeOfRequest(0);
      SetIsGen(true);
      SetPromptInput("");
      SetIsLoading(true);
      SetDataChat((prev) => [...prev, ["end", [promptInput]]]);
      SetChatHistory((prev) => [promptInput, ...prev]);
  
      try {
        await sendTelegramBotForGgsheet();
        // G·ª≠i y√™u c·∫ßu ƒë·∫øn API b·∫±ng axios
        const response = await axios.get("http://127.0.0.1:5000/api/chatbot", { params: { q: promptInput } }); // S·ª≠ d·ª•ng promptInput thay cho query
        // X·ª≠ l√Ω d·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ API
        SetDataChat((prev) => [
            ...prev,
            ["start", [response.data]], // Thay ƒë·ªïi theo c·∫•u tr√∫c d·ªØ li·ªáu c·ªßa API
        ]);
      } catch (error) {
        SetDataChat((prev) => [
          ...prev,
          ["start", ["L·ªói, kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi server", null]],
        ]);
      } finally {
        SetIsLoading(false);
        if (inputRef.current) {
          inputRef.current.focus(); 
        }
      }
    }
  }

  const handleKeyDown = (event) => {
    if (event.key === "Enter") {
      SendMessageChat();
    }
  };
  
  return (
    <div className="bg-gradient-to-r from-blue-50 to-purple-100 h-[85vh] ">
      <div className="hidden lg:block  drawer-side absolute w-64 h-[30vh] left-3 mt-2 drop-shadow-md">
        <div className="menu p-4 w-full min-h-full bg-gray-50 text-base-content rounded-2xl mt-3  overflow-auto scroll-y-auto max-h-[80vh]">
          {/* Sidebar content here */}
          <ul className="menu text-sm">
            <h2 className="font-bold mb-2 bg-[linear-gradient(90deg,hsl(var(--s))_0%,hsl(var(--sf))_9%,hsl(var(--pf))_42%,hsl(var(--p))_47%,hsl(var(--a))_100%)] bg-clip-text will-change-auto [-webkit-text-fill-color:transparent] [transform:translate3d(0,0,0)] motion-reduce:!tracking-normal max-[1280px]:!tracking-normal [@supports(color:oklch(0_0_0))]:bg-[linear-gradient(90deg,hsl(var(--s))_4%,color-mix(in_oklch,hsl(var(--sf)),hsl(var(--pf)))_22%,hsl(var(--p))_45%,color-mix(in_oklch,hsl(var(--p)),hsl(var(--a)))_67%,hsl(var(--a))_100.2%)] ">
              L·ªãch s·ª≠ tr√≤ chuy·ªán
            </h2>
            {chatHistory.length == 0 ? (
              <p className="text-sm text-gray-500">
                Hi·ªán ch∆∞a c√≥ cu·ªôc h·ªôi tho·∫°i n√†o
              </p>
            ) : (
              ""
            )}
            {chatHistory.map((mess, i) => (
              <li key={i}>
                <p>
                  <FontAwesomeIcon icon={faMessage} />
                  {mess.length < 20 ? mess : mess.slice(0, 20) + "..."}
                </p>
              </li>
            ))}
          </ul>
        </div>
      </div>
      <div className="hidden lg:block  drawer-side absolute w-64 h-[50vh] mt-2 right-3 drop-shadow-md">
        <div
          className="menu p-4 w-full min-h-full bg-gray-50 text-base-content 
        rounded-2xl mt-3  overflow-auto scroll-y-auto max-h-[43vh]
        scrollbar-thin scrollbar-thumb-gray-300 
          scrollbar-thumb-rounded-full scrollbar-track-rounded-full
        "
        >
          {/* Sidebar content here */}
          <ul className="menu text-sm">
            <h2 className="font-bold mb-2 bg-[linear-gradient(90deg,hsl(var(--s))_0%,hsl(var(--sf))_9%,hsl(var(--pf))_42%,hsl(var(--p))_47%,hsl(var(--a))_100%)] bg-clip-text will-change-auto [-webkit-text-fill-color:transparent] [transform:translate3d(0,0,0)] motion-reduce:!tracking-normal max-[1280px]:!tracking-normal [@supports(color:oklch(0_0_0))]:bg-[linear-gradient(90deg,hsl(var(--s))_4%,color-mix(in_oklch,hsl(var(--sf)),hsl(var(--pf)))_22%,hsl(var(--p))_45%,color-mix(in_oklch,hsl(var(--p)),hsl(var(--a)))_67%,hsl(var(--a))_100.2%)] ">
              Nh·ªØng c√¢u h·ªèi ph·ªï bi·∫øn
            </h2>

            {commonQuestions.map((mess, i) => (
              <li key={i} onClick={() => SetPromptInput(mess)}>
                <p className="max-w-64">
                  <FontAwesomeIcon icon={faMessage} />
                  {mess}
                  {/* {mess.length < 20 ? mess : mess.slice(0, 20) + "..."} */}

                </p>
              </li>
            ))}
          </ul>
        </div>
      </div>

      <div className={"flex justify-center h-[80vh]"}>
        <div 
          id="chat-area"
          className="
          mt-5 text-sm 
          scrollbar-thin scrollbar-thumb-gray-300 bg-white  
          scrollbar-thumb-rounded-full scrollbar-track-rounded-full
          rounded-3xl border-2 md:w-[50%] md:p-3 p-1  w-full overflow-auto scroll-y-auto h-[80%] "
        >
          {dataChat.map((dataMessages, i) =>
            dataMessages[0] === "start" ? (
              <div className="chat chat-start drop-shadow-md" key={i}>
                <div className="chat-image avatar">
                  <div className="w-10 rounded-full border-2 border-blue-500">
                    <img className="scale-150" src="/assets/robot_image.png"/>
                  </div>
                </div>
                <div className="chat-bubble chat-bubble-info break-words ">
                  <TypeAnimation
                    style={{ whiteSpace: 'pre-line' }} 
                    sequence={[
                      dataMessages[1][0]
                      ,
                      () => SetIsGen(false),
                    ]}
                    onTyping={() => scrollToBottom()}
                    cursor={false}
                    speed={100}
                  />
                </div>
              </div>
            ) : (
              <div className="chat chat-end">
                <div className="chat-bubble shadow-xl chat-bubble-primary bg-gradient-to-r from-purple-500 to-blue-500 text-white">
                  {dataMessages[1][0]}
                </div>
              </div>
            )
          )}
          {isLoading ? (
            <div className="chat chat-start">
              <div className="chat-image avatar">
                <div className="w-10 rounded-full border-2 border-blue-500">
                  <img src= "/assets/robot_image.png" />
                </div>
              </div>
              <div className="chat-bubble chat-bubble-info">
                <ScaleLoader
                  color="#000000"
                  loading={true}
                  height={10}
                  width={10}
                  aria-label="Loading Spinner"
                  data-testid="loader"
                />
                <p className="text-xs font-medium">{timeOfRequest + "/60s"}</p>
              </div>
              
            </div>
          ) : (
            ""
          )}
          <div ref={messagesEndRef} />

          <div className="absolute bottom-[0.2rem] md:w-[50%] grid ">
            <input
              type="text"
              ref={inputRef}
              placeholder="Nh·∫≠p c√¢u h·ªèi t·∫°i ƒë√¢y..."
              className="mr-1 shadow-xl border-2 focus:outline-none px-2 rounded-2xl input-primary col-start-1 md:col-end-12 col-end-11 "
              onChange={onChangeHandler}
              onKeyDown={handleKeyDown}
              // disabled={isGen}
              value={promptInput}

            />

            <button
              disabled={isGen}
              onClick={() => SendMessageChat()}
              className={
                " drop-shadow-md md:col-start-12 rounded-2xl col-start-11 col-end-12 md:col-end-13 btn btn-active btn-primary btn-square bg-gradient-to-tl from-transparent via-blue-600 to-indigo-500"
              }
            >
              <svg
                stroke="currentColor"
                fill="none"
                strokeWidth="2"
                viewBox="0 0 24 24"
                color="white"
                height="15px"
                width="15px"
                xmlns="http://www.w3.org/2000/svg"
              >
                <line x1="22" y1="2" x2="11" y2="13"></line>
                <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
              </svg>
            </button>
            <p className=" text-xs col-start-1 col-end-12 text-justify p-1">
              <b>L∆∞u √Ω: </b>M√¥ h√¨nh c√≥ th·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi kh√¥ng ch√≠nh x√°c ·ªü
              m·ªôt s·ªë tr∆∞·ªùng h·ª£p, v√¨ v·∫≠y h√£y lu√¥n ki·ªÉm ch·ª©ng th√¥ng tin b·∫°n nh√©!
            </p>
          </div>
        </div>
      </div>

    </div>
  );
}
export default ChatBot;
